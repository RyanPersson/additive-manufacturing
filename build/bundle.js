/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "./build/";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./src/js/app.js");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./node_modules/css-loader/index.js!./src/css/tutorial-transforms.css":
/*!*******************************************************************!*\
  !*** ./node_modules/css-loader!./src/css/tutorial-transforms.css ***!
  \*******************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("exports = module.exports = __webpack_require__(/*! ../../node_modules/css-loader/lib/css-base.js */ \"./node_modules/css-loader/lib/css-base.js\")(false);\n// imports\n\n\n// module\nexports.push([module.i, \"#logo-head {\\n    height:7.5%;\\n    border-radius: 5px;\\n    margin: 0.5% 0.5% 0.25% 0.5%;\\n}\\n\\n#canvas {\\n  width: 70%;\\n  height: 70%;\\n  position: relative;\\n  float: left;\\n  margin: 0.25% 0.25% 0.25% 0.5%;\\n}\\n\\n#subcanvas {\\n  width: 28.5%;\\n  height: 45%;\\n  float: left;\\n  position: relative;\\n  margin: 0.25% 0.5% 0.25% 0.25%;\\n}\\n\\n#inspector {\\n  position: relative;\\n  width: 28.5%;\\n  height: 45.5%;\\n  float: left;\\n  margin: 0.25% 0.5% 0.5% 0.25%;\\n}\\n\\n#model-browser {\\n  position: absolute;\\n  width: 70%;\\n  height: 20.3%;\\n  top: 78.2%;\\n  margin: 0.25% 0.25% 0.5% 0.5%;\\n  float: left\\n}\\n\\n.info-text-cat {\\n  font-family: quicksand;\\n  font-size: smaller;\\n  font-weight: bold;\\n  margin: 5px 5px 5px 10px;\\n  line-height: 0.25;\\n}\\n\\n#model-info {\\n  position: absolute;\\n  top: 10%;\\n}\\n\\n#node-info {\\n  position: absolute;\\n  top: 40%;\\n}\\n\\n#matrix-output {\\n  font-family: quicksand;\\n  font-size: x-small;\\n  top: 55%;\\n  left: 50%;\\n  text-align: center;\\n}\\n\\n#models-scroller {\\n  width: 86%;\\n  height: 87%;\\n  position: relative;\\n  left: 13%;\\n  border: 1px solid black;\\n  top: 7%;\\n  border-radius: 5px;\\n  float: left;\\n  overflow-y: scroll;\\n  white-space: nowrap;\\n}\\n\\n#model-browser-buttons {\\n  position: absolute;\\n  width: 17%;\\n  top: 40%;\\n  left: 1.5%;\\n}\\n\\n.model-thumb {\\n  border: 1px solid black;\\n  width: 18.8%;\\n  height: 85%;\\n  margin: 1% 0% 1% 1%;\\n  border-radius: 5px;\\n  text-align: center;\\n  float: left;\\n  z-index: 10;\\n}\\n\\n.model-thumb img {\\n  border-radius: 5px;\\n  width: 100%;\\n  height: 100%;\\n}\\n\\n#model-info-keys {\\n  font-weight: normal;\\n  float: left;\\n  padding-left: 15px;\\n  vertical-align: middle;\\n  padding-top: 5px;\\n\\n}\\n\\n#model-info-values {\\n  font-weight: normal;\\n  font-size: small;\\n  float: left;\\n  padding-left: 10px;\\n  vertical-align: middle;\\n  padding-top: 5px;\\n\\n}\\n\\n#node-info-keys {\\n  font-weight: normal;\\n  float: left;\\n  padding-left: 15px;\\n  vertical-align: middle;\\n  padding-top: 5px;\\n\\n}\\n\\n#node-info-values {\\n  font-weight: normal;\\n  font-size: small;\\n  float: left;\\n  padding-left: 10px;\\n  vertical-align: middle;\\n  padding-top: 5px;\\n\\n}\\n\\nbody, html {\\n    height: 99%;\\n    background-color: #00629e;\\n}\\n\\n.comp-container {\\n    border: 2px solid black;\\n    border-radius: 5px;\\n    background-color: #dadcde;\\n}\\n\\n/* #subviewer {\\n  height: 95%;\\n  width: 95%;\\n} */\\n\\n.comp-label {\\n  position: absolute;\\n  padding: 4px 6px 4px 6px;\\n  font-family: quicksand;\\n  font-weight: bold;\\n  font-size: smaller;\\n}\\n\\n#inspector-buttons {\\n  margin: 0px 10px 0px 10px;\\n  position: absolute;\\n  bottom: 6%;\\n  left:7%;\\n}\\n\\n#inspector-info {\\n  height: 75%;\\n  width: 95%;\\n  position: relative;\\n  top: 5%;\\n  left: 4%;\\n}\\n\\n#ts3dlogo {\\n  height: 100%;\\n  width: 50%;\\n  /* left: 0%; */\\n  position: relative;\\n  float: left;\\n}\\n\\n#ts3dlogo img {\\n  max-width:50%;\\n  max-height:60%;\\n  top: 22%;\\n  left: 2%;\\n  position: relative;\\n}\\n\\n#hclogo {\\n  height: 100%;\\n  width: 50%;\\n  float: left;\\n  position: relative\\n}\\n\\n#hclogo img{\\n  max-width: 60%;\\n  max-height: 65%;\\n  top: 20%;\\n  display: flex;\\n  float: right;\\n  right: 2%;\\n  position: relative;\\n}\\n\\n.button-row {\\n  margin: 2px;\\n  border: 1px solid black;\\n  background-color: #00629e;\\n  font-family: quicksand;\\n  font-size: smaller;\\n}\", \"\"]);\n\n// exports\n\n\n//# sourceURL=webpack:///./src/css/tutorial-transforms.css?./node_modules/css-loader");

/***/ }),

/***/ "./node_modules/css-loader/lib/css-base.js":
/*!*************************************************!*\
  !*** ./node_modules/css-loader/lib/css-base.js ***!
  \*************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n// css base code, injected by the css-loader\nmodule.exports = function (useSourceMap) {\n\tvar list = [];\n\n\t// return the list of modules as css string\n\tlist.toString = function toString() {\n\t\treturn this.map(function (item) {\n\t\t\tvar content = cssWithMappingToString(item, useSourceMap);\n\t\t\tif (item[2]) {\n\t\t\t\treturn \"@media \" + item[2] + \"{\" + content + \"}\";\n\t\t\t} else {\n\t\t\t\treturn content;\n\t\t\t}\n\t\t}).join(\"\");\n\t};\n\n\t// import a list of modules into the list\n\tlist.i = function (modules, mediaQuery) {\n\t\tif (typeof modules === \"string\") modules = [[null, modules, \"\"]];\n\t\tvar alreadyImportedModules = {};\n\t\tfor (var i = 0; i < this.length; i++) {\n\t\t\tvar id = this[i][0];\n\t\t\tif (typeof id === \"number\") alreadyImportedModules[id] = true;\n\t\t}\n\t\tfor (i = 0; i < modules.length; i++) {\n\t\t\tvar item = modules[i];\n\t\t\t// skip already imported module\n\t\t\t// this implementation is not 100% perfect for weird media query combinations\n\t\t\t//  when a module is imported multiple times with different media queries.\n\t\t\t//  I hope this will never occur (Hey this way we have smaller bundles)\n\t\t\tif (typeof item[0] !== \"number\" || !alreadyImportedModules[item[0]]) {\n\t\t\t\tif (mediaQuery && !item[2]) {\n\t\t\t\t\titem[2] = mediaQuery;\n\t\t\t\t} else if (mediaQuery) {\n\t\t\t\t\titem[2] = \"(\" + item[2] + \") and (\" + mediaQuery + \")\";\n\t\t\t\t}\n\t\t\t\tlist.push(item);\n\t\t\t}\n\t\t}\n\t};\n\treturn list;\n};\n\nfunction cssWithMappingToString(item, useSourceMap) {\n\tvar content = item[1] || '';\n\tvar cssMapping = item[3];\n\tif (!cssMapping) {\n\t\treturn content;\n\t}\n\n\tif (useSourceMap && typeof btoa === 'function') {\n\t\tvar sourceMapping = toComment(cssMapping);\n\t\tvar sourceURLs = cssMapping.sources.map(function (source) {\n\t\t\treturn '/*# sourceURL=' + cssMapping.sourceRoot + source + ' */';\n\t\t});\n\n\t\treturn [content].concat(sourceURLs).concat([sourceMapping]).join('\\n');\n\t}\n\n\treturn [content].join('\\n');\n}\n\n// Adapted from convert-source-map (MIT)\nfunction toComment(sourceMap) {\n\t// eslint-disable-next-line no-undef\n\tvar base64 = btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap))));\n\tvar data = 'sourceMappingURL=data:application/json;charset=utf-8;base64,' + base64;\n\n\treturn '/*# ' + data + ' */';\n}\n\n//# sourceURL=webpack:///./node_modules/css-loader/lib/css-base.js?");

/***/ }),

/***/ "./node_modules/style-loader/lib/addStyles.js":
/*!****************************************************!*\
  !*** ./node_modules/style-loader/lib/addStyles.js ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\nvar stylesInDom = {};\n\nvar\tmemoize = function (fn) {\n\tvar memo;\n\n\treturn function () {\n\t\tif (typeof memo === \"undefined\") memo = fn.apply(this, arguments);\n\t\treturn memo;\n\t};\n};\n\nvar isOldIE = memoize(function () {\n\t// Test for IE <= 9 as proposed by Browserhacks\n\t// @see http://browserhacks.com/#hack-e71d8692f65334173fee715c222cb805\n\t// Tests for existence of standard globals is to allow style-loader\n\t// to operate correctly into non-standard environments\n\t// @see https://github.com/webpack-contrib/style-loader/issues/177\n\treturn window && document && document.all && !window.atob;\n});\n\nvar getTarget = function (target) {\n  return document.querySelector(target);\n};\n\nvar getElement = (function (fn) {\n\tvar memo = {};\n\n\treturn function(target) {\n                // If passing function in options, then use it for resolve \"head\" element.\n                // Useful for Shadow Root style i.e\n                // {\n                //   insertInto: function () { return document.querySelector(\"#foo\").shadowRoot }\n                // }\n                if (typeof target === 'function') {\n                        return target();\n                }\n                if (typeof memo[target] === \"undefined\") {\n\t\t\tvar styleTarget = getTarget.call(this, target);\n\t\t\t// Special case to return head of iframe instead of iframe itself\n\t\t\tif (window.HTMLIFrameElement && styleTarget instanceof window.HTMLIFrameElement) {\n\t\t\t\ttry {\n\t\t\t\t\t// This will throw an exception if access to iframe is blocked\n\t\t\t\t\t// due to cross-origin restrictions\n\t\t\t\t\tstyleTarget = styleTarget.contentDocument.head;\n\t\t\t\t} catch(e) {\n\t\t\t\t\tstyleTarget = null;\n\t\t\t\t}\n\t\t\t}\n\t\t\tmemo[target] = styleTarget;\n\t\t}\n\t\treturn memo[target]\n\t};\n})();\n\nvar singleton = null;\nvar\tsingletonCounter = 0;\nvar\tstylesInsertedAtTop = [];\n\nvar\tfixUrls = __webpack_require__(/*! ./urls */ \"./node_modules/style-loader/lib/urls.js\");\n\nmodule.exports = function(list, options) {\n\tif (typeof DEBUG !== \"undefined\" && DEBUG) {\n\t\tif (typeof document !== \"object\") throw new Error(\"The style-loader cannot be used in a non-browser environment\");\n\t}\n\n\toptions = options || {};\n\n\toptions.attrs = typeof options.attrs === \"object\" ? options.attrs : {};\n\n\t// Force single-tag solution on IE6-9, which has a hard limit on the # of <style>\n\t// tags it will allow on a page\n\tif (!options.singleton && typeof options.singleton !== \"boolean\") options.singleton = isOldIE();\n\n\t// By default, add <style> tags to the <head> element\n        if (!options.insertInto) options.insertInto = \"head\";\n\n\t// By default, add <style> tags to the bottom of the target\n\tif (!options.insertAt) options.insertAt = \"bottom\";\n\n\tvar styles = listToStyles(list, options);\n\n\taddStylesToDom(styles, options);\n\n\treturn function update (newList) {\n\t\tvar mayRemove = [];\n\n\t\tfor (var i = 0; i < styles.length; i++) {\n\t\t\tvar item = styles[i];\n\t\t\tvar domStyle = stylesInDom[item.id];\n\n\t\t\tdomStyle.refs--;\n\t\t\tmayRemove.push(domStyle);\n\t\t}\n\n\t\tif(newList) {\n\t\t\tvar newStyles = listToStyles(newList, options);\n\t\t\taddStylesToDom(newStyles, options);\n\t\t}\n\n\t\tfor (var i = 0; i < mayRemove.length; i++) {\n\t\t\tvar domStyle = mayRemove[i];\n\n\t\t\tif(domStyle.refs === 0) {\n\t\t\t\tfor (var j = 0; j < domStyle.parts.length; j++) domStyle.parts[j]();\n\n\t\t\t\tdelete stylesInDom[domStyle.id];\n\t\t\t}\n\t\t}\n\t};\n};\n\nfunction addStylesToDom (styles, options) {\n\tfor (var i = 0; i < styles.length; i++) {\n\t\tvar item = styles[i];\n\t\tvar domStyle = stylesInDom[item.id];\n\n\t\tif(domStyle) {\n\t\t\tdomStyle.refs++;\n\n\t\t\tfor(var j = 0; j < domStyle.parts.length; j++) {\n\t\t\t\tdomStyle.parts[j](item.parts[j]);\n\t\t\t}\n\n\t\t\tfor(; j < item.parts.length; j++) {\n\t\t\t\tdomStyle.parts.push(addStyle(item.parts[j], options));\n\t\t\t}\n\t\t} else {\n\t\t\tvar parts = [];\n\n\t\t\tfor(var j = 0; j < item.parts.length; j++) {\n\t\t\t\tparts.push(addStyle(item.parts[j], options));\n\t\t\t}\n\n\t\t\tstylesInDom[item.id] = {id: item.id, refs: 1, parts: parts};\n\t\t}\n\t}\n}\n\nfunction listToStyles (list, options) {\n\tvar styles = [];\n\tvar newStyles = {};\n\n\tfor (var i = 0; i < list.length; i++) {\n\t\tvar item = list[i];\n\t\tvar id = options.base ? item[0] + options.base : item[0];\n\t\tvar css = item[1];\n\t\tvar media = item[2];\n\t\tvar sourceMap = item[3];\n\t\tvar part = {css: css, media: media, sourceMap: sourceMap};\n\n\t\tif(!newStyles[id]) styles.push(newStyles[id] = {id: id, parts: [part]});\n\t\telse newStyles[id].parts.push(part);\n\t}\n\n\treturn styles;\n}\n\nfunction insertStyleElement (options, style) {\n\tvar target = getElement(options.insertInto)\n\n\tif (!target) {\n\t\tthrow new Error(\"Couldn't find a style target. This probably means that the value for the 'insertInto' parameter is invalid.\");\n\t}\n\n\tvar lastStyleElementInsertedAtTop = stylesInsertedAtTop[stylesInsertedAtTop.length - 1];\n\n\tif (options.insertAt === \"top\") {\n\t\tif (!lastStyleElementInsertedAtTop) {\n\t\t\ttarget.insertBefore(style, target.firstChild);\n\t\t} else if (lastStyleElementInsertedAtTop.nextSibling) {\n\t\t\ttarget.insertBefore(style, lastStyleElementInsertedAtTop.nextSibling);\n\t\t} else {\n\t\t\ttarget.appendChild(style);\n\t\t}\n\t\tstylesInsertedAtTop.push(style);\n\t} else if (options.insertAt === \"bottom\") {\n\t\ttarget.appendChild(style);\n\t} else if (typeof options.insertAt === \"object\" && options.insertAt.before) {\n\t\tvar nextSibling = getElement(options.insertInto + \" \" + options.insertAt.before);\n\t\ttarget.insertBefore(style, nextSibling);\n\t} else {\n\t\tthrow new Error(\"[Style Loader]\\n\\n Invalid value for parameter 'insertAt' ('options.insertAt') found.\\n Must be 'top', 'bottom', or Object.\\n (https://github.com/webpack-contrib/style-loader#insertat)\\n\");\n\t}\n}\n\nfunction removeStyleElement (style) {\n\tif (style.parentNode === null) return false;\n\tstyle.parentNode.removeChild(style);\n\n\tvar idx = stylesInsertedAtTop.indexOf(style);\n\tif(idx >= 0) {\n\t\tstylesInsertedAtTop.splice(idx, 1);\n\t}\n}\n\nfunction createStyleElement (options) {\n\tvar style = document.createElement(\"style\");\n\n\tif(options.attrs.type === undefined) {\n\t\toptions.attrs.type = \"text/css\";\n\t}\n\n\taddAttrs(style, options.attrs);\n\tinsertStyleElement(options, style);\n\n\treturn style;\n}\n\nfunction createLinkElement (options) {\n\tvar link = document.createElement(\"link\");\n\n\tif(options.attrs.type === undefined) {\n\t\toptions.attrs.type = \"text/css\";\n\t}\n\toptions.attrs.rel = \"stylesheet\";\n\n\taddAttrs(link, options.attrs);\n\tinsertStyleElement(options, link);\n\n\treturn link;\n}\n\nfunction addAttrs (el, attrs) {\n\tObject.keys(attrs).forEach(function (key) {\n\t\tel.setAttribute(key, attrs[key]);\n\t});\n}\n\nfunction addStyle (obj, options) {\n\tvar style, update, remove, result;\n\n\t// If a transform function was defined, run it on the css\n\tif (options.transform && obj.css) {\n\t    result = options.transform(obj.css);\n\n\t    if (result) {\n\t    \t// If transform returns a value, use that instead of the original css.\n\t    \t// This allows running runtime transformations on the css.\n\t    \tobj.css = result;\n\t    } else {\n\t    \t// If the transform function returns a falsy value, don't add this css.\n\t    \t// This allows conditional loading of css\n\t    \treturn function() {\n\t    \t\t// noop\n\t    \t};\n\t    }\n\t}\n\n\tif (options.singleton) {\n\t\tvar styleIndex = singletonCounter++;\n\n\t\tstyle = singleton || (singleton = createStyleElement(options));\n\n\t\tupdate = applyToSingletonTag.bind(null, style, styleIndex, false);\n\t\tremove = applyToSingletonTag.bind(null, style, styleIndex, true);\n\n\t} else if (\n\t\tobj.sourceMap &&\n\t\ttypeof URL === \"function\" &&\n\t\ttypeof URL.createObjectURL === \"function\" &&\n\t\ttypeof URL.revokeObjectURL === \"function\" &&\n\t\ttypeof Blob === \"function\" &&\n\t\ttypeof btoa === \"function\"\n\t) {\n\t\tstyle = createLinkElement(options);\n\t\tupdate = updateLink.bind(null, style, options);\n\t\tremove = function () {\n\t\t\tremoveStyleElement(style);\n\n\t\t\tif(style.href) URL.revokeObjectURL(style.href);\n\t\t};\n\t} else {\n\t\tstyle = createStyleElement(options);\n\t\tupdate = applyToTag.bind(null, style);\n\t\tremove = function () {\n\t\t\tremoveStyleElement(style);\n\t\t};\n\t}\n\n\tupdate(obj);\n\n\treturn function updateStyle (newObj) {\n\t\tif (newObj) {\n\t\t\tif (\n\t\t\t\tnewObj.css === obj.css &&\n\t\t\t\tnewObj.media === obj.media &&\n\t\t\t\tnewObj.sourceMap === obj.sourceMap\n\t\t\t) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tupdate(obj = newObj);\n\t\t} else {\n\t\t\tremove();\n\t\t}\n\t};\n}\n\nvar replaceText = (function () {\n\tvar textStore = [];\n\n\treturn function (index, replacement) {\n\t\ttextStore[index] = replacement;\n\n\t\treturn textStore.filter(Boolean).join('\\n');\n\t};\n})();\n\nfunction applyToSingletonTag (style, index, remove, obj) {\n\tvar css = remove ? \"\" : obj.css;\n\n\tif (style.styleSheet) {\n\t\tstyle.styleSheet.cssText = replaceText(index, css);\n\t} else {\n\t\tvar cssNode = document.createTextNode(css);\n\t\tvar childNodes = style.childNodes;\n\n\t\tif (childNodes[index]) style.removeChild(childNodes[index]);\n\n\t\tif (childNodes.length) {\n\t\t\tstyle.insertBefore(cssNode, childNodes[index]);\n\t\t} else {\n\t\t\tstyle.appendChild(cssNode);\n\t\t}\n\t}\n}\n\nfunction applyToTag (style, obj) {\n\tvar css = obj.css;\n\tvar media = obj.media;\n\n\tif(media) {\n\t\tstyle.setAttribute(\"media\", media)\n\t}\n\n\tif(style.styleSheet) {\n\t\tstyle.styleSheet.cssText = css;\n\t} else {\n\t\twhile(style.firstChild) {\n\t\t\tstyle.removeChild(style.firstChild);\n\t\t}\n\n\t\tstyle.appendChild(document.createTextNode(css));\n\t}\n}\n\nfunction updateLink (link, options, obj) {\n\tvar css = obj.css;\n\tvar sourceMap = obj.sourceMap;\n\n\t/*\n\t\tIf convertToAbsoluteUrls isn't defined, but sourcemaps are enabled\n\t\tand there is no publicPath defined then lets turn convertToAbsoluteUrls\n\t\ton by default.  Otherwise default to the convertToAbsoluteUrls option\n\t\tdirectly\n\t*/\n\tvar autoFixUrls = options.convertToAbsoluteUrls === undefined && sourceMap;\n\n\tif (options.convertToAbsoluteUrls || autoFixUrls) {\n\t\tcss = fixUrls(css);\n\t}\n\n\tif (sourceMap) {\n\t\t// http://stackoverflow.com/a/26603875\n\t\tcss += \"\\n/*# sourceMappingURL=data:application/json;base64,\" + btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap)))) + \" */\";\n\t}\n\n\tvar blob = new Blob([css], { type: \"text/css\" });\n\n\tvar oldSrc = link.href;\n\n\tlink.href = URL.createObjectURL(blob);\n\n\tif(oldSrc) URL.revokeObjectURL(oldSrc);\n}\n\n\n//# sourceURL=webpack:///./node_modules/style-loader/lib/addStyles.js?");

/***/ }),

/***/ "./node_modules/style-loader/lib/urls.js":
/*!***********************************************!*\
  !*** ./node_modules/style-loader/lib/urls.js ***!
  \***********************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("\n/**\n * When source maps are enabled, `style-loader` uses a link element with a data-uri to\n * embed the css on the page. This breaks all relative urls because now they are relative to a\n * bundle instead of the current page.\n *\n * One solution is to only use full urls, but that may be impossible.\n *\n * Instead, this function \"fixes\" the relative urls to be absolute according to the current page location.\n *\n * A rudimentary test suite is located at `test/fixUrls.js` and can be run via the `npm test` command.\n *\n */\n\nmodule.exports = function (css) {\n\t// get current location\n\tvar location = typeof window !== \"undefined\" && window.location;\n\n\tif (!location) {\n\t\tthrow new Error(\"fixUrls requires window.location\");\n\t}\n\n\t// blank or null?\n\tif (!css || typeof css !== \"string\") {\n\t\treturn css;\n\t}\n\n\tvar baseUrl = location.protocol + \"//\" + location.host;\n\tvar currentDir = baseUrl + location.pathname.replace(/\\/[^\\/]*$/, \"/\");\n\n\t// convert each url(...)\n\t/*\n This regular expression is just a way to recursively match brackets within\n a string.\n \t /url\\s*\\(  = Match on the word \"url\" with any whitespace after it and then a parens\n    (  = Start a capturing group\n      (?:  = Start a non-capturing group\n          [^)(]  = Match anything that isn't a parentheses\n          |  = OR\n          \\(  = Match a start parentheses\n              (?:  = Start another non-capturing groups\n                  [^)(]+  = Match anything that isn't a parentheses\n                  |  = OR\n                  \\(  = Match a start parentheses\n                      [^)(]*  = Match anything that isn't a parentheses\n                  \\)  = Match a end parentheses\n              )  = End Group\n              *\\) = Match anything and then a close parens\n          )  = Close non-capturing group\n          *  = Match anything\n       )  = Close capturing group\n  \\)  = Match a close parens\n \t /gi  = Get all matches, not the first.  Be case insensitive.\n  */\n\tvar fixedCss = css.replace(/url\\s*\\(((?:[^)(]|\\((?:[^)(]+|\\([^)(]*\\))*\\))*)\\)/gi, function (fullMatch, origUrl) {\n\t\t// strip quotes (if they exist)\n\t\tvar unquotedOrigUrl = origUrl.trim().replace(/^\"(.*)\"$/, function (o, $1) {\n\t\t\treturn $1;\n\t\t}).replace(/^'(.*)'$/, function (o, $1) {\n\t\t\treturn $1;\n\t\t});\n\n\t\t// already a full url? no change\n\t\tif (/^(#|data:|http:\\/\\/|https:\\/\\/|file:\\/\\/\\/|\\s*$)/i.test(unquotedOrigUrl)) {\n\t\t\treturn fullMatch;\n\t\t}\n\n\t\t// convert the url to a full url\n\t\tvar newUrl;\n\n\t\tif (unquotedOrigUrl.indexOf(\"//\") === 0) {\n\t\t\t//TODO: should we add protocol?\n\t\t\tnewUrl = unquotedOrigUrl;\n\t\t} else if (unquotedOrigUrl.indexOf(\"/\") === 0) {\n\t\t\t// path should be relative to the base url\n\t\t\tnewUrl = baseUrl + unquotedOrigUrl; // already starts with '/'\n\t\t} else {\n\t\t\t// path should be relative to current directory\n\t\t\tnewUrl = currentDir + unquotedOrigUrl.replace(/^\\.\\//, \"\"); // Strip leading './'\n\t\t}\n\n\t\t// send back the fixed url(...)\n\t\treturn \"url(\" + JSON.stringify(newUrl) + \")\";\n\t});\n\n\t// send back the fixed css\n\treturn fixedCss;\n};\n\n//# sourceURL=webpack:///./node_modules/style-loader/lib/urls.js?");

/***/ }),

/***/ "./src/css/tutorial-transforms.css":
/*!*****************************************!*\
  !*** ./src/css/tutorial-transforms.css ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("\nvar content = __webpack_require__(/*! !../../node_modules/css-loader!./tutorial-transforms.css */ \"./node_modules/css-loader/index.js!./src/css/tutorial-transforms.css\");\n\nif(typeof content === 'string') content = [[module.i, content, '']];\n\nvar transform;\nvar insertInto;\n\n\n\nvar options = {\"hmr\":true}\n\noptions.transform = transform\noptions.insertInto = undefined;\n\nvar update = __webpack_require__(/*! ../../node_modules/style-loader/lib/addStyles.js */ \"./node_modules/style-loader/lib/addStyles.js\")(content, options);\n\nif(content.locals) module.exports = content.locals;\n\nif(false) {}\n\n//# sourceURL=webpack:///./src/css/tutorial-transforms.css?");

/***/ }),

/***/ "./src/js/app.js":
/*!***********************!*\
  !*** ./src/js/app.js ***!
  \***********************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _instanceOperator__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./instanceOperator */ \"./src/js/instanceOperator.js\");\n/* harmony import */ var _transformOperator__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./transformOperator */ \"./src/js/transformOperator.js\");\n/* harmony import */ var _printingPlane__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./printingPlane */ \"./src/js/printingPlane.js\");\n/* harmony import */ var _syncHelper__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./syncHelper */ \"./src/js/syncHelper.js\");\n/* harmony import */ var _css_tutorial_transforms_css__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../css/tutorial-transforms.css */ \"./src/css/tutorial-transforms.css\");\n/* harmony import */ var _css_tutorial_transforms_css__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(_css_tutorial_transforms_css__WEBPACK_IMPORTED_MODULE_4__);\n\n\n\n\n\n\nlet directoryPath = \"/additive-manufacturing\";\n// Application logic will begin once DOM content is loaded\nwindow.onload = () => {\n    const app = new main();\n};\nclass main {\n    constructor() {\n        // Instantiate two viewers for two different views\n        const mainViewer = new Communicator.WebViewer({\n            containerId: \"viewer\",\n            empty: true\n        });\n        const overheadViewer = new Communicator.WebViewer({\n            containerId: \"subviewer\",\n            empty: true\n        });\n        this._viewerList = [mainViewer, overheadViewer];\n        this._modelList = [];\n        this._printSurfaces = [];\n        this._viewSync = new _syncHelper__WEBPACK_IMPORTED_MODULE_3__[\"default\"](this._viewerList);\n        // By storing in the array, we can initialize both viewers with \n        // the same code using the array \"map\" function\n        this._viewerList.map(viewer => {\n            viewer.start();\n            viewer.setCallbacks({\n                modelStructureReady: () => {\n                    // Need to make a surface for each viewer\n                    this._printSurfaces.push(new _printingPlane__WEBPACK_IMPORTED_MODULE_2__[\"default\"](viewer, 300, 10));\n                    // Load the model and pass in the matrix\n                    this.loadModel(\"microengine\", viewer);\n                    // Set the cameras for the two viewers\n                    let camPos, target, upVec;\n                    switch (viewer) {\n                        case mainViewer:\n                            camPos = new Communicator.Point3(-1000, -1000, 1000);\n                            target = new Communicator.Point3(0, 0, 0);\n                            upVec = new Communicator.Point3(0, 0, 1);\n                            break;\n                        case overheadViewer:\n                            camPos = new Communicator.Point3(0, 0, 1000);\n                            target = new Communicator.Point3(0, 0, 0);\n                            upVec = new Communicator.Point3(0, 1, 0);\n                            break;\n                        default:\n                            alert('Error: No WebViewer Objects Detected. Report to TS3D.');\n                    }\n                    const defaultCam = Communicator.Camera.create(camPos, target, upVec, 1, 720, 720, 0.01);\n                    viewer.view.setCamera(defaultCam);\n                    // Background color for viewers\n                    viewer.view.setBackgroundColor(new Communicator.Color(0, 153, 220), new Communicator.Color(218, 220, 222));\n                }\n            }); // End Callbacks on Both Viewers\n        }); // End Map\n        // Set additional callbacks for main viewer only\n        mainViewer.setCallbacks({\n            modelStructureReady: () => {\n                // Additional options for modelStructureReady that we did not want in both viewers\n                mainViewer.view.getAxisTriad().enable();\n                mainViewer.view.getNavCube().enable();\n                mainViewer.view.getNavCube().setAnchor(Communicator.OverlayAnchor.LowerRightCorner);\n            },\n            // Adding functionality for a selection callback in the main viewer\n            selectionArray: selectionEvents => {\n                // Do Not Want the Build Plate as a Part of any Model Selection Events\n                const ppNodeId = this._printSurfaces[0].getNodeId(); // Node Id of the build plate\n                // Return the selection IDs for the current selections, check if the printing plane\n                // was selected in the results - if so, remove it\n                const selectionIds = selectionEvents.map(sEvent => sEvent.getSelection().getNodeId());\n                const foundIndex = selectionIds.indexOf(ppNodeId);\n                if (foundIndex != -1) {\n                    mainViewer.selectionManager.remove(selectionEvents[foundIndex].getSelection());\n                    selectionEvents.splice(foundIndex, 1);\n                }\n                // If the printing plane was the only result, no other selections fired\n                // this callback, so exit\n                if (selectionEvents.length == 0) return;\n                // Otherwise, display node information for the first node in the selection array\n                const nodeId = selectionEvents[0].getSelection().getNodeId();\n                const modelFileName = mainViewer.model.getModelFileNameFromNode(nodeId);\n                const modelFileFormat = mainViewer.model.getModelFileTypeFromNode(nodeId);\n                document.getElementById(\"model-file-name\").innerHTML = modelFileName || \"N/A\";\n                document.getElementById(\"model-file-type\").innerHTML = Communicator.FileType[modelFileFormat] || \"N/A\";\n                document.getElementById(\"node-id\").innerHTML = nodeId.toString() || \"Unknown\";\n                document.getElementById(\"node-name\").innerHTML = mainViewer.model.getNodeName(nodeId) || \"Node Name Not Defined\";\n                _transformOperator__WEBPACK_IMPORTED_MODULE_1__[\"default\"].setMatrixText(mainViewer.model.getNodeNetMatrix(nodeId));\n            }\n        }); // End Callbacks\n        // Do not want any interaction in the overhead viewer, so we will disable all operators\n        overheadViewer.operatorManager.clear();\n        // Disable Default Handle Operator - overwriting with custom one that inherits its functionality\n        mainViewer.operatorManager.remove(Communicator.OperatorId.Handle);\n        // Create custom operators and register them with the main webviewer\n        this._instanceOp = new _instanceOperator__WEBPACK_IMPORTED_MODULE_0__[\"default\"](this._viewSync);\n        this._instanceHandle = mainViewer.registerCustomOperator(this._instanceOp);\n        this._transformOp = new _transformOperator__WEBPACK_IMPORTED_MODULE_1__[\"default\"](this._viewSync);\n        this._transformHandle = mainViewer.registerCustomOperator(this._transformOp);\n        this.setEventListeners();\n    } // End main Constructor\n    // Function to load models and translate them so they are loaded \n    // at the origin and above the printing plane\n    loadModel(modelName, viewer) {\n        const modelNum = viewer.model.getNodeChildren(viewer.model.getAbsoluteRootNode()).length;\n        const nodeName = \"Model-\" + (modelNum + 1);\n        const modelNodeId = viewer.model.createNode(null, nodeName);\n        this._modelList.push(modelName);\n        debugger;\n        viewer.model.loadSubtreeFromScsFile(modelNodeId, directoryPath + \"/data/\" + modelName + \".scs\").then(() => {\n            let loadMatrix = viewer.model.getNodeNetMatrix(modelNodeId);\n            viewer.model.getNodeRealBounding(modelNodeId).then(box => {\n                loadMatrix.setTranslationComponent(-box.min.x, -box.min.y, -box.min.z);\n                viewer.model.setNodeMatrix(modelNodeId, loadMatrix, true);\n            });\n        });\n        this._viewSync.setNeedsUpdate(true);\n    }\n    setEventListeners() {\n        // We will use the main viewer to gather scene information\n        let mainViewer = this._viewerList[0];\n        document.getElementById(\"arrange-button\").onclick = () => {\n            // One plane for each viewer - need to call for each plane\n            this._transformOp.arrangeOnPlane(this._printSurfaces[0].getDimensions().planeSize).then(results => this._viewSync.syncNodeTransforms());\n        };\n        document.getElementById(\"handles-button\").onclick = () => {\n            // Need to gather the selected node IDs to know which nodes\n            // will be affected by the transformation\n            let nodeIds = [];\n            const selectionItems = mainViewer.selectionManager.getResults();\n            selectionItems.map(selectionItem => {\n                nodeIds.push(selectionItem.getNodeId());\n            });\n            // Ensure the user has made a selection before trying to add handles\n            if (selectionItems.length !== 0) {\n                this._transformOp.addHandles(nodeIds);\n                this._transformOp.showHandles();\n                mainViewer.operatorManager.push(this._transformHandle);\n            } else {\n                alert(\"Try Again. Please first select nodes from the model to transform!\");\n            }\n        };\n        document.getElementById(\"instance-button\").onclick = () => {\n            // Use the button to push and pop the operator from the operator stack\n            let elem = document.getElementById(\"instance-button\");\n            if (elem.innerHTML === \"Instance Part\") {\n                // Gather nodes to be instanced\n                let nodeIds = [];\n                const selectionItems = mainViewer.selectionManager.getResults();\n                selectionItems.map(selection => {\n                    nodeIds.push(selection.getNodeId());\n                });\n                if (selectionItems.length !== 0) {\n                    elem.innerHTML = \"Disable Instancing\";\n                    this._instanceOp.setNodesToInstance(nodeIds);\n                    // Remove the selection operator from the stack while instancing\n                    mainViewer.operatorManager.push(this._instanceHandle);\n                    mainViewer.operatorManager.remove(Communicator.OperatorId.Select);\n                    mainViewer.selectionManager.setHighlightNodeSelection(false);\n                    mainViewer.selectionManager.setHighlightFaceElementSelection(false);\n                    mainViewer.selectionManager.setPickTolerance(0);\n                } else {\n                    alert(\"Try Again. Please first select nodes from the model to instance!\");\n                }\n            } else {\n                elem.innerHTML = \"Instance Part\";\n                // Remove the instance operator from the stack and reenable selection and highlighting\n                mainViewer.selectionManager.clear();\n                mainViewer.operatorManager.remove(this._instanceHandle);\n                mainViewer.operatorManager.push(Communicator.OperatorId.Select);\n                mainViewer.selectionManager.setHighlightNodeSelection(true);\n                mainViewer.selectionManager.setHighlightFaceElementSelection(true);\n            }\n        };\n        document.getElementById(\"open-model-button\").onclick = () => {\n            // Proxy to override the default behavior of file input type\n            document.getElementById('file-input').click();\n        };\n        document.getElementById(\"file-input\").onchange = e => {\n            // Once a file has been selected by the user, use the file information to \n            // gather the associated relevant data like thumbnails\n            let fileChoice = e.target.value;\n            let filename = fileChoice.replace(/^.*[\\\\\\/]/, '');\n            let modelThumbnail = document.createElement('a');\n            let modelname = filename.split(\".\", 1)[0];\n            modelThumbnail.id = modelname;\n            modelThumbnail.href = \"\";\n            modelThumbnail.className = \"model-thumb\";\n            modelThumbnail.setAttribute(\"model\", modelname);\n            let imgPath = directoryPath + \"/data/thumbnails/\" + modelname + \".png\";\n            // Check to see if the selected model has a corresponding thumbnail made\n            fetch(imgPath).then(resp => {\n                if (resp.ok) {\n                    let modelImg = document.createElement('img');\n                    modelImg.src = imgPath;\n                    modelThumbnail.appendChild(modelImg);\n                } else {\n                    modelThumbnail.innerHTML = modelname;\n                    console.log(\"No Image for this Model was found.\");\n                }\n            });\n            document.getElementById(\"models-scroller\").appendChild(modelThumbnail);\n            // Now update the event callbacks for the thumbnails\n            const thumbnailElements = document.getElementsByClassName(\"model-thumb\");\n            for (let thumbnail of thumbnailElements) {\n                let thumbnailElement = thumbnail;\n                thumbnailElement.onclick = e => {\n                    e.preventDefault();\n                    let elem = e.currentTarget;\n                    let modelToLoad = elem.getAttribute(\"model\");\n                    // Load the model into the scene when clicked\n                    this._viewerList.map(viewer => {\n                        this.loadModel(modelToLoad, viewer);\n                    });\n                };\n            }\n            ;\n        };\n    } // End setting event handlers \n} // End main class\n\n//# sourceURL=webpack:///./src/js/app.js?");

/***/ }),

/***/ "./src/js/instanceOperator.js":
/*!************************************!*\
  !*** ./src/js/instanceOperator.js ***!
  \************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default\", function() { return instanceOperator; });\nclass instanceOperator extends Communicator.Operator.Operator {\n    constructor(viewSync) {\n        super();\n        this._viewSync = viewSync;\n        this._mainViewer = viewSync.getMainViewer();\n        this._attachedViewers = viewSync.getAttachedViewers();\n        this._ptDown = Communicator.Point2.zero();\n        this._currentNodes = [];\n        this._nodePosZ = 0;\n    }\n    setNodesToInstance(nodeIds) {\n        this._currentNodes = this._gatherChildLeafNodes(nodeIds);\n        this._mainViewer.model.getNodesBounding(this._currentNodes).then(box => {\n            this._nodePosZ = box.max.z - box.min.z;\n        });\n    }\n    onMouseDown(event) {\n        this._ptDown.assign(event.getPosition());\n    }\n\n    onMouseUp(event) {\n        const position = event.getPosition();\n        if (position.equals(this._ptDown)) {\n            this._insertModeMouseUp(position);\n        }\n    }\n\n    _insertModeMouseUp(ePosition) {\n        const config = new Communicator.PickConfig(Communicator.SelectionMask.Face);\n        this._mainViewer.view.pickFromPoint(ePosition, config).then(selectionItem => {\n            if (selectionItem.isEntitySelection() && this._mainViewer.model.getNodeName(selectionItem.getNodeId()) === \"printingPlane\") {\n                this._insertGeometry(selectionItem.getPosition());\n            } else {\n                alert(\"Please select a point on the Printing Plane\");\n            }\n        });\n    }\n\n    _gatherChildLeafNodes(startNodes) {\n        const model = this._mainViewer.model;\n        let nodes = startNodes.slice();\n        let leaves = [];\n        for (let i = 0; i < nodes.length; ++i) {\n            let node = nodes[i];\n            let kids = model.getNodeChildren(node);\n            if (kids.length === 0) {\n                leaves.push(node);\n            }\n            for (let j = 0; j < kids.length; j++) {\n                let kid = kids[j];\n                nodes.push(kid);\n            }\n        }\n        return leaves;\n    }\n\n    _insertGeometry(position) {\n        this._mainViewer.model.getMeshIds(this._currentNodes).then(meshIds => {\n            meshIds.forEach((meshId, index) => {\n                this._mainViewer.model.getNodeEffectiveFaceColor(this._currentNodes[index], 0).then(color => {\n                    let netMatrix = this._mainViewer.model.getNodeNetMatrix(this._currentNodes[index]);\n                    netMatrix.m[12] = position.x; // Add translation to the X-axis.\n                    netMatrix.m[13] = position.y; // Add translation to the Y-axis.\n                    netMatrix.m[14] = this._nodePosZ;\n                    let mid = [];\n                    let numInstances = this._attachedViewers.length + 1;\n                    for (let i = 0; i < numInstances; ++i) {\n                        mid.push(new Communicator.MeshInstanceData(meshId, netMatrix, \"Node \" + this._currentNodes + \" Instance\", color, Communicator.Color.black()));\n                    }\n                    this._mainViewer.model.createMeshInstance(mid.pop()).then(nodeId => {\n                        this._viewSync.setNeedsUpdate(true);\n                    });\n                    this._attachedViewers.map(viewer => {\n                        viewer.model.createMeshInstance(mid.pop()).then(nodeId => {\n                            this._viewSync.setNeedsUpdate(true);\n                        });\n                    });\n                });\n            });\n        });\n    }\n}\n\n//# sourceURL=webpack:///./src/js/instanceOperator.js?");

/***/ }),

/***/ "./src/js/printingPlane.js":
/*!*********************************!*\
  !*** ./src/js/printingPlane.js ***!
  \*********************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default\", function() { return printingPlane; });\nclass printingPlane {\n    constructor(viewerInstance, size = 300, depth = 10) {\n        this._planeSize = size;\n        this._planeDepth = depth;\n        this._viewer = viewerInstance;\n        this._nodeId = null;\n        this._createPrintingPlane();\n    }\n    _createPrintingPlane() {\n        let gridSize = this._planeSize;\n        let d = this._planeDepth;\n        let meshData = new Communicator.MeshData();\n        meshData.setFaceWinding(Communicator.FaceWinding.Clockwise);\n        meshData.setBackfacesEnabled(true);\n        let gridCount = 15;\n        let gridUnit = gridSize / gridCount * 2;\n        for (let i = -gridCount / 2; i <= gridCount / 2; ++i) {\n            let position = gridUnit * i;\n            meshData.addPolyline([-gridSize, position, 0, gridSize, position, 0]);\n            meshData.addPolyline([position, -gridSize, 0, position, gridSize, 0]);\n        }\n        meshData.addFaces([\n        // +Z Normal Plane\n        -gridSize, -gridSize, 0, -gridSize, gridSize, 0, gridSize, gridSize, 0, -gridSize, -gridSize, 0, gridSize, gridSize, 0, gridSize, -gridSize, 0,\n        // -Z Normal Plane\n        -gridSize, -gridSize, -d, -gridSize, gridSize, -d, gridSize, gridSize, -d, -gridSize, -gridSize, -d, gridSize, gridSize, -d, gridSize, -gridSize, -d,\n        // +X Normal Plane\n        gridSize, -gridSize, 0, gridSize, -gridSize, -d, gridSize, gridSize, -d, gridSize, -gridSize, 0, gridSize, gridSize, -d, gridSize, gridSize, 0,\n        // -X Normal Plane\n        -gridSize, -gridSize, 0, -gridSize, -gridSize, -d, -gridSize, gridSize, 0, -gridSize, -gridSize, 0, -gridSize, gridSize, -d, -gridSize, gridSize, -d,\n        // +Y Normal Plane\n        -gridSize, gridSize, 0, gridSize, gridSize, 0, -gridSize, gridSize, -d, gridSize, gridSize, 0, gridSize, gridSize, -d, -gridSize, gridSize, -d,\n        // -Y Normal Plane\n        -gridSize, -gridSize, 0, gridSize, -gridSize, 0, -gridSize, -gridSize, -d, gridSize, -gridSize, 0, gridSize, -gridSize, -d, -gridSize, -gridSize, -d], [\n        // +Z Normals\n        0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1,\n        // -Z Normals\n        0, 0, -1, 0, 0, -1, 0, 0, -1, 0, 0, -1, 0, 0, -1, 0, 0, -1,\n        // +X Normals\n        1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0,\n        // -X Normals\n        -1, 0, 0, -1, 0, 0, -1, 0, 0, -1, 0, 0, -1, 0, 0, -1, 0, 0,\n        // +Y Normals\n        0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0,\n        // -Y Normals\n        0, -1, 0, 0, -1, 0, 0, -1, 0, 0, -1, 0, 0, -1, 0, 0, -1, 0]);\n        this._viewer.model.createMesh(meshData).then(meshId => {\n            let flags = Communicator.MeshInstanceCreationFlags.DoNotOutlineHighlight | Communicator.MeshInstanceCreationFlags.ExcludeBounding | Communicator.MeshInstanceCreationFlags.DoNotCut | Communicator.MeshInstanceCreationFlags.DoNotExplode | Communicator.MeshInstanceCreationFlags.DoNotLight;\n            let meshInstanceData = new Communicator.MeshInstanceData(meshId, null, \"printingPlane\", null, null, null, flags);\n            meshInstanceData.setLineColor(new Communicator.Color(150, 150, 150));\n            meshInstanceData.setFaceColor(new Communicator.Color(75, 75, 75));\n            // Do not provide a node id since this will be out of hierarchy\n            this._viewer.model.createMeshInstance(meshInstanceData, null, null, true).then(nodeId => {\n                this._nodeId = nodeId;\n            });\n        });\n    }\n    getDimensions() {\n        return {\n            planeSize: this._planeSize,\n            planeDepth: this._planeDepth\n        };\n    }\n    getNodeId() {\n        return this._nodeId;\n    }\n}\n\n//# sourceURL=webpack:///./src/js/printingPlane.js?");

/***/ }),

/***/ "./src/js/syncHelper.js":
/*!******************************!*\
  !*** ./src/js/syncHelper.js ***!
  \******************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default\", function() { return syncHelper; });\nclass syncHelper {\n    constructor(viewerList) {\n        // Copy the array, so we do not modify the reference values\n        let tfViewerList = viewerList.slice(0);\n        // Assign the first element to the \n        this._mainViewer = tfViewerList.shift();\n        // All remaining viewers are attached\n        this._attachedViewers = tfViewerList;\n        this._needsUpdate = true;\n        this._modelTreeNodes = [];\n    }\n    syncNodeTransforms(nodeIds = []) {\n        if (this._needsUpdate == true) {\n            this._modelTreeNodes = [];\n            this._gatherAllNodeIds(this._mainViewer.model.getAbsoluteRootNode(), this._modelTreeNodes);\n            this._modelTreeNodes = this._modelTreeNodes.filter(Boolean);\n            this._needsUpdate = false;\n        }\n        nodeIds = nodeIds.length == 0 ? this._modelTreeNodes : nodeIds;\n        let matMap = new Map();\n        for (let node of nodeIds) {\n            matMap.set(node, this._mainViewer.model.getNodeMatrix(node));\n        }\n        for (let [node, matrix] of matMap.entries()) {\n            this._attachedViewers.map(viewer => {\n                viewer.model.setNodeMatrix(node, matrix);\n            });\n        }\n    }\n    _gatherAllNodeIds(parent, nodeIds) {\n        nodeIds.push(parent);\n        let children = this._mainViewer.model.getNodeChildren(parent);\n        if (children.length !== 0) {\n            for (let child of children) {\n                this._gatherAllNodeIds(child, nodeIds);\n            }\n        }\n    }\n    addInstanceNodeId(nodeId) {\n        this._modelTreeNodes.push(nodeId);\n    }\n    setNeedsUpdate(option) {\n        this._needsUpdate = option;\n    }\n    getModelTreeNodes() {\n        return this._modelTreeNodes;\n    }\n    getMainViewer() {\n        return this._mainViewer;\n    }\n    getAttachedViewers() {\n        return this._attachedViewers;\n    }\n}\n\n//# sourceURL=webpack:///./src/js/syncHelper.js?");

/***/ }),

/***/ "./src/js/transformOperator.js":
/*!*************************************!*\
  !*** ./src/js/transformOperator.js ***!
  \*************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default\", function() { return transformOperator; });\nclass transformOperator extends Communicator.Operator.HandleOperator {\n    constructor(viewSync) {\n        super(viewSync.getMainViewer());\n        this._mainViewer = viewSync.getMainViewer();\n        this._viewSync = viewSync;\n    }\n    static setMatrixText(matrix) {\n        const ids = ['m11', 'm21', 'm31', 'm41', 'm12', 'm22', 'm32', 'm42', 'm13', 'm23', 'm33', 'm43', 'm14', 'm24', 'm34', 'm44'];\n        for (let [index, id] of ids.entries()) {\n            document.getElementById(id).innerHTML = matrix.m[index].toFixed(1);\n        }\n    }\n    onMouseMove(event) {\n        super.onMouseMove(event);\n        if (this.isDragging()) {\n            const selectionItems = this._mainViewer.selectionManager.getResults();\n            let nodeIds = [];\n            selectionItems.map(selectionItem => {\n                nodeIds.push(selectionItem.getNodeId());\n            });\n            this._viewSync.syncNodeTransforms(nodeIds);\n            transformOperator.setMatrixText(this._mainViewer.model.getNodeNetMatrix(nodeIds[0]));\n        }\n    }\n    _gatherLeavesAndClearMats(node, leafArray, pArray2) {\n        var children = this._mainViewer.model.getNodeChildren(node);\n        if (children.length == 0) leafArray.push(node);\n        for (var i = 0; i < children.length; i++) {\n            var ident = new Communicator.Matrix();\n            ident.loadIdentity();\n            pArray2.push(this._mainViewer.model.setNodeMatrix(children[i], ident, false));\n            this._gatherLeavesAndClearMats(children[i], leafArray, pArray2);\n        }\n    }\n    arrangeOnPlane(boundarySize) {\n        return new Promise(resolve => {\n            let leafArray = [];\n            let setEmptyMatsPromises = [];\n            let rootNode = this._mainViewer.model.getAbsoluteRootNode();\n            let ident = new Communicator.Matrix();\n            ident.loadIdentity();\n            // Set the root node of the model tree to its identity matrix\n            // and recursively do the same for all children\n            this._mainViewer.model.setNodeMatrix(rootNode, ident, false);\n            this._gatherLeavesAndClearMats(rootNode, leafArray, setEmptyMatsPromises);\n            // Once all nodes have been reset, we can get the node boundings\n            Promise.all(setEmptyMatsPromises).then(values => {\n                let getBoundingPromises = new Array();\n                for (var i = 0; i < leafArray.length; i++) getBoundingPromises.push(this._mainViewer.model.getNodesBounding([leafArray[i]]));\n                // Once all node bounding have been gathered, start arranging\n                Promise.all(getBoundingPromises).then(values => {\n                    let partSpacingX = 0;\n                    let partSpacingY = 0;\n                    for (let bb of values) {\n                        if (bb.extents().x > partSpacingX) {\n                            partSpacingX = bb.extents().x;\n                        }\n                        if (bb.extents().y > partSpacingY) {\n                            partSpacingY = bb.extents().y;\n                        }\n                    }\n                    let setNewMatPromises = [];\n                    let extent = boundarySize * 0.7;\n                    let x = -extent;\n                    let y = -extent;\n                    for (let i = 0; i < values.length; i++) {\n                        let m = new Communicator.Matrix();\n                        m.loadIdentity();\n                        let bb = values[i];\n                        let c = bb.center();\n                        m.m[12] = x + bb.extents().x;\n                        m.m[13] = y - c.y;\n                        m.m[14] = -bb.min.z;\n                        setNewMatPromises.push(this._mainViewer.model.setNodeMatrix(leafArray[i], m, false));\n                        x += bb.extents().x + partSpacingX;\n                        if (x > extent) {\n                            x = -extent;\n                            y += partSpacingY * 1.5;\n                        }\n                    }\n                    Promise.all(setNewMatPromises).then(() => resolve());\n                });\n            });\n        });\n    }\n}\n\n//# sourceURL=webpack:///./src/js/transformOperator.js?");

/***/ })

/******/ });